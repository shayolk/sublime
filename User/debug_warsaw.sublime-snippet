<snippet>
	<content><![CDATA[
#define sim template<typename c
#define ris return *this
#define dor > trc& operator<<
#define eni(x) sim> typename \
    enable_if<sizeof dud<c>(0) x 1, trc&>::type operator<<(c i) {
sim> struct rge {c b,e;};
sim> rge<c> range(c i,c j) {return rge<c>{i,j};}
sim> auto dud(c* x) -> decltype(cerr<<*x,0);
sim> char dud(...);
struct trc {
#ifdef DOPPELLEBEN
~trc() {cerr<<endl;}
eni(!=) cerr<<boolalpha<<i;ris;}
eni(==) ris<<range(begin(i),end(i));}
sim,typename b dor(pair <b,c> d) {ris<<"("<<d.first<<", "<<d.second<<")";}
sim dor(rge<c> d) {
    *this<<"[";
    for(auto it=d.b; it!=d.e; ++it) *this<<", "+2*(it==d.b)<<*it;
    ris<<"]";
}
#else
sim dor(const c&) {ris;}
#endif
};
#define dbg(...) " ["<<#__VA_ARGS__": "<<(__VA_ARGS__)<<"] "
// trc& operator<<(trc& dd,P p) {dd<<"("<< p.x<<", "<<p.y<<")"; return dd;}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_debug_warsaw</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
